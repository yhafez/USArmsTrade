{"version":3,"sources":["utils/format.js","components/HeatMap/HeatMap.js","components/Header/Header.js","components/Instructions/Instructions.js","components/RegionChart/RegionChart.js","components/FilterUI/DropDown.js","components/FilterUI/FilterUI.js","App.js","reportWebVitals.js","index.js"],"names":["formatNumber","num","toString","replace","Countries","require","Heatmap","startYear","this","props","endYear","dataType","alert","setStartYear","NaN","setEndYear","dateRangeString","hasStartYear","Boolean","hasEndYear","selectedData","maxAuthorization","maxDelivery","formattedData","armsSalesTotals","reduce","dataSet","yearlySale","countryCode","country","trim","countryName","year","total","authorizations","JSON","parse","deliveries","adjustMaxValues","Object","keys","paletteScaleDeliveries","d3","scale","linear","domain","range","paletteScaleAuthorizations","fillColor","authorization","Datamap","element","document","getElementById","done","datamap","svg","selectAll","on","id","properties","name","countryTotalDeliveries","countryTotalAuthorizations","scope","fills","defaultFill","data","geographyConfig","dataUrl","popupOnHover","borderColor","borderWidth","highlightOnHover","highlightBorderWidth","highlightBorderColor","highlightFillColor","geo","popupTemplate","join","Component","Header","className","Instructions","target","href","title","rel","state","labels","regionalData","map","el","datasets","label","Notifications","match","backgroundColor","hoverBackgroundColor","RegionChart","useState","position","setPosition","useEffect","window","innerWidth","width","height","options","maintainAspectRatio","responsive","display","text","fontSize","legend","fontColor","tooltips","bodyFontSize","callbacks","tooltipItem","index","value","datasetIndex","DropDown","setYear","htmlFor","onChange","e","handleSelection","defaultValue","FilterUI","setDataType","handleChange","styling","type","defaultChecked","App","innerHeight","setDimensions","PropAndWindowChangeWatch","handleResize","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0af1a5fc.chunk.js","sourcesContent":["export function formatNumber(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n","import React, { Component } from \"react\";\nimport Datamap from \"datamaps/dist/datamaps.world.min.js\";\nimport d3 from \"d3\";\nimport \"../HeatMap/HeatMap.css\";\nimport armsSalesTotals from \"../../data/arms_sales_totals.json\";\nimport * as Countries from \"i18n-iso-countries\";\nimport { formatNumber } from \"../../utils/format\";\n\n// Required configuration to convert country names to their three digit country codes\nCountries.registerLocale(require(\"i18n-iso-countries/langs/en.json\"));\n\nexport default class Heatmap extends Component {\n    componentDidMount() {\n        /*----------------------------------------------- Variables -----------------------------------------------*/\n\n        const startYear = this.props.startYear;\n        const endYear = this.props.endYear;\n        const dataType = this.props.dataType;\n\n        //TODO: Update drop downs when this alert happens as well!\n        if (startYear > endYear) {\n            alert(\"The start year can't be greater than the end year\");\n            this.props.setStartYear(NaN);\n            this.props.setEndYear(NaN);\n            return;\n        }\n\n        const hasStartYear = Boolean(startYear);\n        const hasEndYear = Boolean(endYear);\n\n        // If a start and end date are specified in filter settings, store the range as a string to use as key and in to validate that a date range has been specified\n        let dateRangeString;\n        if (hasStartYear && hasEndYear)\n            dateRangeString = `${startYear}-${endYear}`;\n\n        // Tracks largest authorization and dollar amounts based on filter settings\n        let maxAuthorization = 0;\n        let maxDelivery = 0;\n\n        // Define selectedData based on filter settings; default to total\n        let selectedData;\n        dateRangeString\n            ? (selectedData = dateRangeString)\n            : hasStartYear\n            ? (selectedData = startYear)\n            : (selectedData = \"total\");\n\n        /*----------------------------------------------- Dataset -----------------------------------------------*/\n\n        // Loop over dataset, remove trailing spaces from country names, and create object \"formattedData\" containing country name, total delivery amounts, and authorization amounts, and yearly delivery amounts, and authorization amounts\n        const formattedData = armsSalesTotals.reduce((dataSet, yearlySale) => {\n            const countryCode = Countries.getAlpha3Code(\n                yearlySale.country.trim(),\n                \"en\"\n            );\n            const countryName = yearlySale.country.trim();\n            const year = yearlySale.year;\n\n            // Somaliland doesn't have a 3 letter country code as required by Datamaps, but appears in datamaps rendered globe, so assign it a custom 3 letter code\n            if (countryName === \"Somaliland\") {\n                dataSet[\"SML\"] = {\n                    country: countryName,\n                    total: {\n                        authorizations: JSON.parse(yearlySale.authorizations),\n                        deliveries: JSON.parse(yearlySale.deliveries),\n                    },\n                };\n                if (!dateRangeString) adjustMaxValues(yearlySale);\n            }\n            // If country isn't yet stored in totalVals, identify its Alpha-3 code (for compatability with Datamaps) to use as key, and store object containing country name, authorization amount, and delivery amount; else, increment authorization and delivery amounts to yield total amounts across all years\n            else if (!dataSet[countryCode]) {\n                dataSet[countryCode] = {\n                    country: countryName,\n                    total: {\n                        countryCode,\n                        authorizations: JSON.parse(yearlySale.authorizations),\n                        deliveries: JSON.parse(yearlySale.deliveries),\n                    },\n                };\n                if (!dateRangeString) adjustMaxValues(yearlySale);\n\n                // If year is not-empty, store authorization and delivery values for that year, else store them as $0\n                dataSet[countryCode][year] = {\n                    authorizations: JSON.parse(yearlySale.authorizations),\n                    deliveries: JSON.parse(yearlySale.deliveries),\n                };\n            } else {\n                dataSet[countryCode].total.authorizations += JSON.parse(\n                    yearlySale.authorizations\n                );\n                dataSet[countryCode].total.deliveries += JSON.parse(\n                    yearlySale.deliveries\n                );\n                if (!dateRangeString) adjustMaxValues(yearlySale);\n\n                dataSet[countryCode][year] = {\n                    authorizations: JSON.parse(yearlySale.authorizations),\n                    deliveries: JSON.parse(yearlySale.deliveries),\n                };\n            }\n            return dataSet;\n        }, {});\n\n        // Fill in missing data with values of $0 for deliveries and amoutns\n        for (let country in formattedData) {\n            for (let year = 1996; year <= 2020; ++year) {\n                if (!formattedData[country][year]) {\n                    formattedData[country][year] = {\n                        authorizations: 0,\n                        deliveries: 0,\n                    };\n                }\n            }\n        }\n\n        // If a date range is specified in the filter settings, check the first item to see if there is a stored total value for that date range in the dataset and, if not, calculate the totals for that date range and store/memoize them\n        if (dateRangeString) {\n            if (\n                !formattedData[Object.keys(formattedData)[0]][dateRangeString]\n            ) {\n                for (let year = startYear; year <= endYear; ++year) {\n                    for (let country in formattedData) {\n                        if (!formattedData[country][dateRangeString]) {\n                            formattedData[country][dateRangeString] = {\n                                authorizations:\n                                    formattedData[country][year].authorizations,\n                                deliveries:\n                                    formattedData[country][year].deliveries,\n                            };\n                        } else {\n                            formattedData[country][\n                                dateRangeString\n                            ].authorizations +=\n                                formattedData[country][year].authorizations;\n                            formattedData[country][\n                                dateRangeString\n                            ].authorizations +=\n                                formattedData[country][year].deliveries;\n                            adjustMaxValues(\n                                formattedData[country][dateRangeString]\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        // Set color scale for both deliveries and authorizations\n        let paletteScaleDeliveries = d3.scale\n            .linear()\n            .domain([0, maxDelivery])\n            .range([\"rgb(159, 142, 173)\", \"rgb(128, 0, 255)\"]);\n\n        let paletteScaleAuthorizations = d3.scale\n            .linear()\n            .domain([0, maxAuthorization])\n            .range([\"rgb(159, 142, 173)\", \"rgb(128, 0, 255)\"]);\n\n        // Assign color weight to each country and fill in missing years in formattedData\n        // TODO: Weight is currently based off deliveries; should we make it a button to toggle between weighing by deliveries and alternatively weighing by authorizations?\n\n        for (let country in formattedData) {\n            if (dataType === \"deliveries\") {\n                if (formattedData[country][selectedData].deliveries === 0) {\n                    formattedData[country].fillColor = \"#aaaaaa\";\n                } else {\n                    formattedData[country].fillColor = paletteScaleDeliveries(\n                        formattedData[country][selectedData].deliveries\n                    );\n                }\n            } else if (dataType === \"authorizations\") {\n                if (formattedData[country][selectedData].authorization === 0) {\n                    formattedData[country].fillColor = \"#aaaaaa\";\n                } else {\n                    formattedData[\n                        country\n                    ].fillColor = paletteScaleAuthorizations(\n                        formattedData[country][selectedData].authorizations\n                    );\n                }\n            }\n        }\n\n        /*----------------------------------------------- Helper Functions -----------------------------------------------*/\n\n        // Helper function to adjust value of maxAuthorization and maxDelivery if those values in the item being processed are larger than currently set value appropriately based on selected filters\n        function adjustMaxValues({ authorizations, deliveries }) {\n            // If a start date and end date are set, then maxAuthorization and maxDelivery are set to represent the values of the countries with the highest sum of authorization and delivery amounts in that date range\n            if (hasStartYear) {\n                if (+authorizations > maxAuthorization)\n                    maxAuthorization = authorizations;\n                if (+deliveries > maxDelivery) maxDelivery = deliveries;\n            }\n            // If only a start date is set, then maxAuthorization and maxDelivery are set to represent the values of the countries with the highest authorization and delivery amounts for that year only\n            else if (hasStartYear) {\n                if (+authorizations > maxAuthorization)\n                    maxAuthorization = authorizations;\n                if (+deliveries > maxDelivery) maxDelivery = deliveries;\n            }\n            // If no start date or end date are set, maxAuthorization and maxDelivery defaults to representing the values of the countries with the highest sum of authorization and delivery amounts across all years\n            else {\n                if (+authorizations > maxAuthorization)\n                    maxAuthorization = authorizations;\n                if (+deliveries > maxDelivery) maxDelivery = deliveries;\n            }\n        }\n\n        /*----------------------------------------------- Datamaps Config -----------------------------------------------*/\n\n        // Creates and configures the world map and its styles, as well as popups on hover\n        new Datamap({\n            element: document.getElementById(\"heat_map\"),\n            done: function (datamap) {\n                datamap.svg\n                    .selectAll(\".datamaps-subunit\")\n                    .on(\"click\", (country) => {\n                        let countryCode = country.id;\n                        let countryName = country.properties.name;\n                        let countryTotalDeliveries =\n                            countryCode !== \"USA\"\n                                ? formattedData[country.id].total.deliveries\n                                : 0;\n                        let countryTotalAuthorizations =\n                            countryCode !== \"USA\"\n                                ? formattedData[country.id].total.authorizations\n                                : 0;\n                        alert(`\n            ${countryName}, ${countryCode}\n            Total Authorizations: $${formatNumber(countryTotalAuthorizations)}\n            Total Deliveries: $${formatNumber(countryTotalDeliveries)}`);\n                    });\n            },\n            scope: \"world\",\n            //Default color if no fillColor is specified\n            fills: { defaultFill: \"rgb(170, 170, 170)\" },\n            // Specifies formattedData as data source for popup data and populating weighted color\n            data: formattedData,\n            dataType: \"json\",\n            geographyConfig: {\n                dataUrl: \"./world.topo.json\",\n                popupOnHover: true,\n                borderColor: \"#000\",\n                borderWidth: \"0.5\",\n                highlightOnHover: true,\n                highlightBorderWidth: 3.5,\n                highlightBorderColor: \"#D8D835\",\n                // Matches highlight color to fill color, so color doesn't change on hover\n                highlightFillColor: function (geo) {\n                    return geo[\"fillColor\"] || \"rgb(170, 170, 170)\";\n                },\n                // Defines template of popup that appears when country is hovered over based on filter settings\n                popupTemplate: function (geo, data) {\n                    if (!data) {\n                        return;\n                    }\n                    if (selectedData === \"total\") {\n                        return [\n                            '<div class=\"hoverinfo\">',\n                            \"<strong>\",\n                            geo.properties.name + \" (1996 - 2020)\",\n                            \"</strong>\",\n                            \"<br>Authorizations: <strong>$\",\n                            formatNumber(data.total.authorizations),\n                            \"</strong>\",\n                            \"<br>Deliveries: <strong>$\",\n                            formatNumber(data.total.deliveries),\n                            \"</strong>\",\n                            \"</div>\",\n                        ].join(\"\");\n                    } else if (selectedData === dateRangeString) {\n                        return [\n                            '<div class=\"hoverinfo\">',\n                            \"<strong>\",\n                            geo.properties.name +\n                                \" (\" +\n                                startYear +\n                                \" - \" +\n                                endYear +\n                                \")\",\n                            \"</strong>\",\n                            \"<br>Authorizations: <strong>$\",\n                            formatNumber(data[dateRangeString].authorizations),\n                            \"</strong>\",\n                            \"<br>Deliveries: <strong>$\",\n                            formatNumber(data[dateRangeString].deliveries),\n                            \"</strong>\",\n                            \"</div>\",\n                        ].join(\"\");\n                    } else {\n                        return [\n                            '<div class=\"hoverinfo\">',\n                            \"<strong>\",\n                            geo.properties.name + \" (\" + startYear + \")\",\n                            \"</strong>\",\n                            \"<br>Authorizations: <strong>$\",\n                            formatNumber(data[startYear].authorizations),\n                            \"</strong>\",\n                            \"<br>Deliveries: <strong>$\",\n                            formatNumber(data[startYear].deliveries),\n                            \"</strong>\",\n                            \"</div>\",\n                        ].join(\"\");\n                    }\n                },\n            },\n            // Defines template of popup that appears when country is hovered over based on filter settings\n            popupTemplate: function (geo, data) {\n                if (!data) {\n                    return;\n                }\n                if (selectedData === \"total\") {\n                    return [\n                        '<div class=\"hoverinfo\">',\n                        \"<strong>\",\n                        geo.properties.name + \" (1996 - 2020)\",\n                        \"</strong>\",\n                        \"<br>Authorizations: <strong>\",\n                        formatNumber(data.total.authorizations),\n                        \"</strong>\",\n                        \"<br>Deliveries: <strong>\",\n                        formatNumber(data.total.deliveries),\n                        \"</strong>\",\n                        \"</div>\",\n                    ].join(\"\");\n                } else if (selectedData === dateRangeString) {\n                    return [\n                        '<div class=\"hoverinfo\">',\n                        \"<strong>\",\n                        geo.properties.name +\n                            \" (\" +\n                            startYear +\n                            \" - \" +\n                            endYear +\n                            \")\",\n                        \"</strong>\",\n                        \"<br>Authorizations: <strong>\",\n                        formatNumber(data[dateRangeString].authorizations),\n                        \"</strong>\",\n                        \"<br>Deliveries: <strong>\",\n                        formatNumber(data[dateRangeString].deliveries),\n                        \"</strong>\",\n                        \"</div>\",\n                    ].join(\"\");\n                } else {\n                    return [\n                        '<div class=\"hoverinfo\">',\n                        \"<strong>\",\n                        geo.properties.name + \" (\" + startYear + \")\",\n                        \"</strong>\",\n                        \"<br>Authorizations: <strong>\",\n                        formatNumber(data[startYear].authorizations),\n                        \"</strong>\",\n                        \"<br>Deliveries: <strong>\",\n                        formatNumber(data[startYear].deliveries),\n                        \"</strong>\",\n                        \"</div>\",\n                    ].join(\"\");\n                }\n            },\n        });\n    }\n\n    /*----------------------------------------------- Component Render -----------------------------------------------*/\n\n    // Creates div React component which is used by Datamaps above as the container for the map\n    render() {\n        return <div id=\"heat_map\"></div>;\n    }\n}\n","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n    return (\n        <header>\n            <h1 className=\"app-title\">US Arms Sales</h1>\n        </header>\n    );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./Instructions.css\";\n\nfunction Instructions() {\n    return (\n        <section className=\"insructions\">\n            <h2 className=\"instructions-title\">About This Map</h2>\n            <p className=\"instructions-info\">\n                This map shows where the US has sold arms from 2000 to 2020.\n                Data for Latin America is also available back until 1996. The\n                motivation for this application is to represent data regarding\n                U.S. arms exports in a simple, intuitive, and flexible format to\n                help inform action and activism around U.S. imperialism and\n                global militarism, as well as to raise awareness regarding the\n                central role of the U.S. in enabling the global arms trade.\n            </p>\n            <p className=\"instructions-info\">\n                All data represents publicly accessible data from the Security\n                Assistance Monitor Arms Sales{\" \"}\n                <a\n                    target=\"_blank\"\n                    href=\"https://securityassistance.org/arm-sales/\"\n                    title=\"Opens the Security Assistance Monitor Arms Sales database in a new tab\"\n                    rel=\"noreferrer\"\n                >\n                    {\" \"}\n                    database\n                </a>{\" \"}\n                accessed on December 4th, 2020. As such, countries indicated as\n                receiving no arms from the U.S. may or may not have received\n                arms whose value has not yet been disclosed or declassified to\n                the public, and actual figures across the data may be higher\n                than what is shown.\n            </p>\n            <p className=\"instructions-info\">\n                The doughnut chart below shows notifications data divided by\n                region rather than country. As opposed to authorizations and\n                deliveries, notifications are the amount of sales reported to\n                the U.S. congress prior to issuing permits authorizing the\n                specified amount of sales.\n            </p>\n            <h2 className=\"instructions-title\">Using the Map</h2>\n            <p className=\"instructions-info\">\n                Hover over a country to see the dollar value of the arms that\n                those countries were approved for (authorizations) and the value\n                of the arms that were actually delivered (deliveries). Clicking\n                on a country will also show the data in an alert message. On\n                mobile, the data can only be viewed by tapping the country.\n            </p>\n            <p className=\"instructions-info\">\n                The color of the countries visually represent either the amount\n                of authorizations or deliveries depending on the \"Data Type\"\n                filter setting. Light gray/purple represent a lower value, and\n                dark purple/blue represent a higher value. Solid grey represents\n                the U.S. (the arms exporter in this data), as well as any\n                countries that have not received arms from the U.S. based on the\n                data used.\n            </p>\n            <p className=\"instructions-info\">\n                The \"Date Range\" filter options can be used to arms export data\n                for a particulare date range. To view data for a single year,\n                simply select that year in the \"From\" filter and leave the \"To\"\n                filter on \"Date\".\n            </p>\n            <h2 className=\"instructions-title\">Using the Doughnut Chart</h2>\n            <p className=\"instructions-info\">\n                Hovering over a section of the doughnut chart displays the name\n                of the region along with the total value of arms exported by the\n                U.S. to that region. Clicking on the name of a region in the key\n                will update the graph to display without the data for that\n                region and clicking again will restore it. On mobile, viewing\n                the data and filtering the regions displayed can be achieved by\n                tapping the region on the chart and key respectively.\n            </p>\n        </section>\n    );\n}\n\nexport default Instructions;\n","import regionalData from \"../../data/regional_arms_sales_notifications.json\";\nimport React, { useState, useEffect } from \"react\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport { formatNumber } from \"../../utils/format\";\nimport \"./RegionChart.css\";\n\nlet labels = regionalData.map((el) => el[\"Region Arms Sales Dashboard\"]);\nlet numbers = regionalData.map((el) =>\n    el.Notifications.match(/[0-9]/g).join(\"\")\n);\nconst state = {\n    labels,\n    datasets: [\n        {\n            label: \"Arms Sales\",\n            data: numbers, //data displayed on pie\n            backgroundColor: [\n                \"#F54EA2\",\n                \"#41b6e6\",\n                \"#f6003c\",\n                \"#7ebc59\",\n                \"#8134af\",\n            ],\n            hoverBackgroundColor: [\n                \"#b9006e\",\n                \"#005792\",\n                \"#C1292E\",\n                \"#2b9464\",\n                \"#42218E\",\n            ],\n        },\n    ],\n};\n\nfunction RegionChart() {\n    const [position, setPosition] = useState(\"right\");\n\n    useEffect(() => {\n        if (window.innerWidth < 600) setPosition(\"bottom\");\n        else setPosition(\"right\");\n    }, [window.innerWidth]);\n\n    return (\n        <div id=\"doughnut-container\">\n            <Doughnut\n                data={state}\n                width={100}\n                height={400}\n                options={{\n                    maintainAspectRatio: false,\n                    responsive: true,\n                    title: {\n                        display: true,\n                        text: \"Arms Sales Notifications by Region\",\n                        fontSize: 25,\n                    },\n                    legend: {\n                        display: true,\n                        position: position,\n                        labels: {\n                            fontSize: 20, //labels font size\n                            fontColor: \"#000\",\n                        },\n                    },\n                    tooltips: {\n                        //pop up info\n                        bodyFontSize: 15,\n                        callbacks: {\n                            label: function (tooltipItem, data) {\n                                const label = data.labels[tooltipItem.index]; //tooltipItem.index gives the index of this data item in the dataset\n                                const value = formatNumber(\n                                    data.datasets[tooltipItem.datasetIndex]\n                                        .data[tooltipItem.index] //finds the matching data item in dataset\n                                );\n                                return `${label}: $${value}`;\n                            },\n                        },\n                    },\n                }}\n            />\n        </div>\n    );\n}\nexport default RegionChart;\n","import React from \"react\";\nimport \"./DropDown.css\";\n\nexport default function DropDown({ label, name, setYear }) {\n    function handleSelection(e) {\n        if (e.target.value === \"NaN\") setYear(NaN);\n        else setYear(e.target.value);\n    }\n\n    return (\n        <div className=\"filter-dropdown\">\n            <label className=\"filter-label\" htmlFor={name}>\n                {label}\n            </label>\n            <select\n                className=\"filter-selector\"\n                id={name}\n                name={name}\n                onChange={(e) => handleSelection(e)}\n            >\n                <option value=\"NaN\" defaultValue>\n                    Date\n                </option>\n                <option value=\"1996\">1996</option>\n                <option value=\"1997\">1997</option>\n                <option value=\"1998\">1998</option>\n                <option value=\"1999\">1999</option>\n                <option value=\"2000\">2000</option>\n                <option value=\"2001\">2001</option>\n                <option value=\"2002\">2002</option>\n                <option value=\"2003\">2003</option>\n                <option value=\"2004\">2004</option>\n                <option value=\"2005\">2005</option>\n                <option value=\"2006\">2006</option>\n                <option value=\"2007\">2007</option>\n                <option value=\"2008\">2008</option>\n                <option value=\"2009\">2009</option>\n                <option value=\"2010\">2010</option>\n                <option value=\"2011\">2011</option>\n                <option value=\"2012\">2012</option>\n                <option value=\"2013\">2013</option>\n                <option value=\"2014\">2014</option>\n                <option value=\"2015\">2015</option>\n                <option value=\"2016\">2016</option>\n                <option value=\"2017\">2017</option>\n                <option value=\"2018\">2018</option>\n                <option value=\"2019\">2019</option>\n                <option value=\"2020\">2020</option>\n            </select>\n        </div>\n    );\n}\n","import React from \"react\";\nimport DropDown from \"./DropDown\";\nimport \"./FilterUI.css\";\n\nexport default function FilterUI({ setDataType, setStartYear, setEndYear }) {\n    function handleChange(e) {\n        setDataType(e.target.value);\n    }\n    return (\n        <div id=\"filter-ui\" styling=\"width: 100%\">\n            <h3 id=\"filter-header\"> Filter </h3>\n            <div className=\"filter-options\">\n                <div id=\"data-type-filter\">\n                    <h3 id=\"data-type-header\">Data Type</h3>\n                    <div className=\"data-type-options\">\n                        <div>\n                            <input\n                                type=\"radio\"\n                                className=\"data-radio\"\n                                id=\"authorizations-radio\"\n                                name=\"data-type\"\n                                value=\"authorizations\"\n                                onChange={handleChange}\n                            />\n                            <label htmlFor=\"data-type\" className=\"radio-labels\">\n                                Authorizations\n                            </label>\n                        </div>\n\n                        <div>\n                            <input\n                                type=\"radio\"\n                                className=\"data-radio\"\n                                id=\"deliveries-radio\"\n                                name=\"data-type\"\n                                value=\"deliveries\"\n                                defaultChecked\n                                onChange={handleChange}\n                            />\n                            <label htmlFor=\"data-type\" className=\"radio-labels\">\n                                Deliveries\n                            </label>\n                        </div>\n                    </div>\n                </div>\n\n                <div id=\"date-range\">\n                    <h3 id=\"date-range-header\">Date Range</h3>\n                    <div id=\"date-range-options\">\n                        <DropDown\n                            label=\"From: \"\n                            name=\"Start-Date\"\n                            setYear={setStartYear}\n                        />\n                        <DropDown\n                            label=\"To: \"\n                            name=\"End-Date\"\n                            setYear={setEndYear}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport HeatMap from \"./components/HeatMap/HeatMap\";\nimport Header from \"./components/Header/Header\";\nimport Instructions from \"./components/Instructions/Instructions\";\nimport RegionChart from \"./components/RegionChart/RegionChart\";\nimport FilterUI from \"./components/FilterUI/FilterUI\";\n\nfunction App() {\n    // Display total values on heatmap by default, replace with data from single year (start date) or date range based on filter options\n    const [startYear, setStartYear] = useState(NaN);\n    const [endYear, setEndYear] = useState(NaN);\n\n    // Specifies whether the map will render data on notification, authorization, or delivery amounts\n    const [dataType, setDataType] = useState(\"deliveries\");\n\n    // Set state for window height and width to re-render on browser-window size change\n    const [, setDimensions] = useState({\n        width: window.innerWidth,\n        height: window.innerHeight,\n    });\n\n    // Watches for changes in props passed to HeatMap.js and browser changes to stimulate re-render\n    function PropAndWindowChangeWatch({ startYear, endYear, dataType }) {\n        function handleResize() {\n            setDimensions({\n                width: window.innerWidth,\n                height: window.innerHeight,\n            });\n        }\n\n        useEffect(() => {\n            window.addEventListener(\"resize\", handleResize);\n            return () => window.removeEventListener(\"resize\", handleResize);\n        }, [startYear, endYear, dataType]);\n\n        return (\n            <HeatMap\n                setStartYear={setStartYear}\n                startYear={startYear}\n                setEndYear={setEndYear}\n                endYear={endYear}\n                dataType={dataType}\n            />\n        );\n    }\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <div className=\"map-styling\">\n                <PropAndWindowChangeWatch\n                    startYear={startYear}\n                    endYear={endYear}\n                    dataType={dataType}\n                />\n            </div>\n            <FilterUI\n                setDataType={setDataType}\n                setStartYear={setStartYear}\n                setEndYear={setEndYear}\n            />\n            <Instructions />\n            <RegionChart />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}